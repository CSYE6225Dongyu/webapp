name: Package and Packer Workflow

on:
  push:
    branches:
      - main

env:
  SPRING_APPLICATION_NAME: ${{ secrets.SPRING_APPLICATION_NAME }}
  LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: ${{ secrets.LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY }}
  SPRING_DATASOURCE_DRIVER_CLASS_NAME: ${{ secrets.SPRING_DATASOURCE_DRIVER_CLASS_NAME }}
  SPRING_JPA_HIBERNATE_DDL_AUTO: ${{ secrets.SPRING_JPA_HIBERNATE_DDL_AUTO }}
  SPRING_JPA_SHOW_SQL: ${{ secrets.SPRING_JPA_SHOW_SQL }}
  SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: ${{ secrets.SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL }}
  SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: ${{ secrets.SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT }}
  SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}

jobs:
  build-and-packer:
    if: github.repository == 'CSYE6225Dongyu/webapp'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # no need for .env when package the JAR file, create in terraform:user_data
      # add .env to run webapp.service
      - name: Generate application.properties & .env
        run: |
          echo "spring.application.name=${{ secrets.SPRING_APPLICATION_NAME }}" > src/main/resources/application.properties
          echo "logging.level.org.springframework.security=${{ secrets.LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY }}" >> src/main/resources/application.properties
          
          echo "# Database Configuration" >> src/main/resources/application.properties
          echo "spring.datasource.url=\${DB_URL}" >> src/main/resources/application.properties
          echo "spring.datasource.username=\${DB_USERNAME}" >> src/main/resources/application.properties
          echo "spring.datasource.password=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> src/main/resources/application.properties
          echo "spring.datasource.driver-class-name=${{ secrets.SPRING_DATASOURCE_DRIVER_CLASS_NAME }}" >> src/main/resources/application.properties
          
          echo "# JPA/Hibernate Configuration" >> src/main/resources/application.properties
          echo "spring.jpa.hibernate.ddl-auto=${{ secrets.SPRING_JPA_HIBERNATE_DDL_AUTO }}" >> src/main/resources/application.properties
          echo "spring.jpa.show-sql=${{ secrets.SPRING_JPA_SHOW_SQL }}" >> src/main/resources/application.properties
          echo "spring.jpa.properties.hibernate.format_sql=${{ secrets.SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL }}" >> src/main/resources/application.properties
          echo "spring.jpa.properties.hibernate.dialect=${{ secrets.SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT }}" >> src/main/resources/application.properties
          
          echo "# AWS S3 Configuration" >> src/main/resources/application.properties
          echo "aws.s3.bucket-name=\${AWS_S3_BUCKET_NAME}" >> src/main/resources/application.properties
          echo "aws.s3.region=\${AWS_REGION}" >> src/main/resources/application.properties
          echo "spring.servlet.multipart.max-file-size=5MB" >> src/main/resources/application.properties
          echo "spring.servlet.multipart.max-request-size=5MB" >> src/main/resources/application.properties
          
          echo "# aws SNS Configuration" >> src/main/resources/application.properties
          echo "aws.sns.topic.arn=\${AWS_SNS_TOPIC_ARN}" >> src/main/resources/application.properties
          echo "aws.sns.region=\${AWS_REGION}" >> src/main/resources/application.properties
          
          echo "# StatsD Config" >> src/main/resources/application.properties
          echo "management.statsd.metrics.export.enabled=true" >> src/main/resources/application.properties
          echo "management.statsd.metrics.export.host=localhost" >> src/main/resources/application.properties
          echo "management.statsd.metrics.export.port=8125" >> src/main/resources/application.properties
          echo "management.statsd.metrics.export.flavor=datadog" >> src/main/resources/application.properties
          echo "management.statsd.metrics.export.polling-frequency=5s" >> src/main/resources/application.properties
          
          echo "# Logging Config" >> src/main/resources/application.properties
          echo "logging.level.io.micrometer=DEBUG" >> src/main/resources/application.properties
          echo "logging.level.software.amazon.awssdk.services.cloudwatch=DEBUG" >> src/main/resources/application.properties
          echo "logging.file.name=./log/webapp.log" >> src/main/resources/application.properties
          cat src/main/resources/application.properties
          
          cat src/main/resources/application.properties
          
          cp src/main/resources/application.properties ./

          touch .env
      - name: Build JAR file
        run: ./mvnw clean package -Dmaven.test.skip=true

      - name: Compress JAR file into webapp.zip
        run: |
          jar_name=$(ls target/*.jar)  # Get the name of the JAR file
          zip -j webapp.zip "$jar_name"  # Compress the JAR into webapp.zip in the root directory

      - name: Set up AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION }}

      - name: Initialize Packer
        run: packer init .
        working-directory: ./packer

      - name: Build AMI using Packer
        id: build_ami
        run: |
          AMI_ID=$(packer build -machine-readable -var-file=awspacker.pkvars.hcl awspacker.pkr.hcl | grep 'artifact,0,id' | cut -d, -f6)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
        working-directory: ./packer

      - name: Update Launch Template with New AMI ID
        id: update_launch_template
        run: |
          aws ec2 create-launch-template-version \
            --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
            --version-description "Updated with new AMI ID" \
            --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID }}\"}"
          NEW_VERSION=$(aws ec2 describe-launch-template-versions \
            --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
            --query 'LaunchTemplateVersions[-1].VersionNumber' --output text)
          echo "LAUNCH_TEMPLATE_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update Auto Scaling Group
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
            --launch-template "LaunchTemplateId=${{ secrets.LAUNCH_TEMPLATE_ID }},Version=${{ env.LAUNCH_TEMPLATE_VERSION }}"

      - name: Start Instance Refresh
        id: instance_refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
            --preferences '{"MinHealthyPercentage": 100, "InstanceWarmup": 300}' \
            --query 'InstanceRefreshId' --output text)
          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV

      - name: Wait for Instance Refresh to Complete
        run: |
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
              --instance-refresh-ids ${{ env.REFRESH_ID }} \
              --query 'InstanceRefreshes[0].Status' --output text)
            echo "Current Instance Refresh Status: $STATUS"
            if [[ "$STATUS" == "Successful" ]]; then
              echo "Instance refresh completed successfully."
              break
            elif [[ "$STATUS" == "Failed" ]]; then
              echo "Instance refresh failed."
              exit 1
            else
              echo "Instance refresh is still in progress..."
              sleep 30
            fi
          done
